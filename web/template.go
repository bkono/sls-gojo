// Code generated by go-bindata. DO NOT EDIT.
// sources:
// template/application.css
// template/index.html
package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateApplicationCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x6d\x6e\xe3\x2c\x10\xfe\x9f\x53\x20\x45\xaf\xda\xbe\x32\x15\xce\x57\x13\xe7\x0c\x7b\x08\x6c\xc6\xf6\x6c\x30\x58\x30\x6e\x92\x56\xbd\xfb\xca\x60\x3b\x49\xd3\xee\xf6\xef\xc3\x30\xcc\x3c\x1f\xfc\xff\x3e\x63\x8c\xb1\xdc\x9e\xb8\xc7\x37\x34\x55\xc6\x72\xeb\x14\x38\x9e\xdb\xd3\x7e\xf6\x31\x9b\x3d\x13\x9c\x88\x17\x60\x08\x1c\x8b\xd5\x01\x91\x1a\x2b\x93\xb1\x78\x10\x2a\x6b\x6a\x74\x92\x5b\x75\x1e\xca\x1a\x34\xfc\x88\x8a\xea\x8c\xa5\x42\xbc\x1e\xf7\x13\x5a\x03\x56\x35\x45\xb8\x8e\x70\x69\x0d\xf1\x52\x36\xa8\xcf\x19\x7b\xf8\x65\x0d\x79\x70\x4e\xd2\x43\xc2\xbc\x34\x9e\x7b\x70\x58\xc6\xd2\x5c\x16\x87\xca\xd9\xce\x28\x8e\x8d\xac\x20\x63\x1a\x0d\x48\xc7\x2b\x27\x15\x82\xa1\x47\xb2\x2c\xb7\x44\xb6\x61\x1a\x4a\x4a\xd8\x7c\xbb\xdc\x88\x62\x99\xb0\xf9\x02\xf2\x72\x97\x3e\xc5\x46\xfc\x08\xf9\x01\x89\x87\xb7\x7d\x63\x2d\xd5\x81\x01\x69\x08\xa5\x46\xe9\x41\xc5\x42\x85\xbe\xd5\xf2\x9c\xb1\x52\xc3\x29\x42\x61\x7d\x8e\x04\x8d\xbf\x90\xd0\x1f\xfc\xee\x3c\x61\x79\xe6\x85\x35\x04\x86\x6e\x19\x4a\xdf\x2f\xcb\x1e\x07\x12\x56\x42\x0c\xcc\x48\x57\xa1\xe1\x71\xf2\x8c\xad\xda\x28\x40\xcf\xb6\x74\x20\x47\xa5\x82\x3a\xfd\xa6\x9d\xcf\xd8\xa6\x1d\xe6\x89\x78\xc6\x8c\x35\x10\x91\x56\x2a\x15\xd6\x59\x88\xb1\x28\x2e\x8a\x6f\x70\x0d\xde\x08\xf2\x32\xc1\xe4\xa4\xf1\x48\x68\x4d\x5f\x2c\x1a\xcf\x40\x7a\xe0\x68\xb8\xed\x28\x96\x5c\xc4\xfd\x6f\x7f\x67\x8c\x81\x87\xcf\x07\x5c\x4b\x4f\x59\xd0\x25\x6c\x97\x77\x44\xd6\x0c\x8e\x29\x3a\xe7\xad\xcb\x58\x6b\xf1\x42\xe8\x40\x0b\xd9\x36\x63\xcb\xc5\xf5\xd4\xc3\xfb\x8b\x74\x1a\xba\xb0\xba\xbf\x7f\xac\x91\x60\x7f\x71\x76\x2d\x95\x3d\x66\x4c\xb0\x45\x7b\xea\x29\x63\x82\xb9\x2a\x97\x8f\xeb\x24\x5d\x27\xab\x55\x22\x9e\xd7\x4f\x9f\x48\x13\x57\x0c\x4d\xf2\xa3\xe9\x9d\xc6\x73\x6d\x8b\xc3\xfe\x2b\x39\xd6\x5f\x51\x9d\x6e\x6e\xc0\x51\xf7\xf5\xa8\x7b\x3d\x19\x61\xac\x0b\xaf\xdc\xc3\xf7\x1a\x7f\x97\xdb\xb0\x8a\x1d\xe5\x73\xa0\x25\xe1\x2b\xfc\x48\xd8\x3e\xf2\xbd\x77\x25\x9a\x29\xf0\xdf\xb5\x8a\xd2\xf4\x64\xc9\x8e\xec\x88\x9d\x46\x61\xd6\x62\x1a\xfd\xf6\x1f\xe8\xdf\x00\x53\xb8\x73\x4b\xef\x3f\x8c\xf4\x56\x28\xa8\x12\x36\x17\x42\x42\x59\x26\x6c\xbe\x5c\x6e\x76\xf0\xf2\x34\x0c\xac\xb1\xcd\xad\x74\xea\xa7\xed\x16\xdb\x55\xec\x97\x16\xc5\x8b\x12\xfd\xcf\xa0\x14\xec\xb6\x43\x3f\xdf\x15\x05\x78\xcf\x87\x21\x41\xfd\x83\x88\x9b\x24\x7c\xf4\xf7\x73\x42\xd2\x30\xfe\x84\x57\x16\x5e\x4d\x0e\xbe\x8d\xfb\xc5\xda\xb6\x95\x05\xd2\x39\x63\xcf\xbb\x2f\x6c\x13\xbe\x8b\x30\x23\x18\xf5\x97\x0f\xf9\x3e\x0e\xfd\xa5\xda\x36\xa0\xd1\x1c\xc2\xc5\xe1\x18\x4d\x0d\x0e\x43\xa6\x43\x23\x05\x85\x75\x32\xae\x39\x5a\xed\x2e\x99\x1f\xb3\x3f\x01\x00\x00\xff\xff\xea\x44\x57\xbb\x3b\x06\x00\x00")

func templateApplicationCssBytes() ([]byte, error) {
	return bindataRead(
		_templateApplicationCss,
		"template/application.css",
	)
}

func templateApplicationCss() (*asset, error) {
	bytes, err := templateApplicationCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/application.css", size: 1595, mode: os.FileMode(420), modTime: time.Unix(1535217443, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x6f\xdb\x38\x13\xbe\xfb\x57\x4c\xd9\x43\xdf\x17\x58\x51\x96\x1c\x7f\x24\x95\xb4\x40\xb3\x1b\x2c\x16\x2d\x5a\x6c\xda\xc3\x9e\x16\x14\x39\xb6\x98\x52\xa4\x4a\x52\x76\x5c\x23\xff\x7d\x41\xc9\x4a\x14\xd7\xc5\xf6\x50\x1d\xa8\xe1\x70\xe6\xe1\xc3\xf9\xa0\x94\xbd\xf8\xed\xfd\xf5\xc7\xbf\x3f\xfc\x0e\x95\xaf\x55\x31\xc9\xfa\xd7\x24\xab\x90\x89\x62\x02\x00\x90\xbd\x88\xa2\xb7\xe8\xa1\xb4\x66\xe7\xd0\xc2\x67\x6d\x76\xb0\xc3\xd2\x49\x8f\x20\x1d\x98\xc6\xcb\x5a\x7e\x45\x01\x6b\x63\xa1\x36\xa5\x54\x18\x45\x47\xdf\x1a\x3d\x03\xcd\x6a\xcc\xc9\x56\xe2\xae\x31\xd6\x13\xe0\x46\x7b\xd4\x3e\x27\x3b\x29\x7c\x95\x0b\xdc\x4a\x8e\x51\x37\xf9\x05\xa4\x96\x5e\x32\x15\x39\xce\x14\xe6\x09\x9d\x12\x88\x8f\x60\x4a\xea\xcf\x50\x59\x5c\xe7\xa4\xf2\xbe\x71\x57\x71\xbc\x36\xda\x3b\xba\x31\x66\xa3\x90\x35\xd2\x51\x6e\xea\x98\x3b\xf7\xeb\x9a\xd5\x52\xed\xf3\x77\x61\x1d\xad\x65\x9e\x80\x45\x95\x13\xe7\xf7\x0a\x5d\x85\xe8\xc9\x18\xf5\x74\xed\xb8\xcd\xe1\x40\xdf\x30\x87\x9f\xfe\x7a\xfb\xf0\x10\x37\x6d\xa9\x24\x8f\x59\xd3\x28\xc9\x99\x97\x46\x53\xee\x1c\x29\x26\x59\xdc\x47\x6b\x92\x95\x46\xec\x8b\x49\x56\x33\xa9\x81\x2b\xe6\x5c\x4e\x1c\x6a\x31\x6c\x25\xe4\x76\x50\x87\x18\x30\xa9\xd1\x1e\xd7\x00\x32\x76\x66\x53\x02\x1d\xa9\x9c\x78\xbc\xf7\x91\x40\x6e\x6c\xb7\xf3\x95\x36\x1a\x5f\x73\xa3\x8c\xbd\x92\xba\x42\x2b\xfd\xeb\x47\x24\x80\xac\x4a\x8a\x3f\x5b\xe7\xe1\xbd\xe6\x98\xc5\x55\x32\x5a\x6a\x1e\x99\xb5\xa5\x97\x5e\x21\x29\x6e\x51\x0b\x60\x50\xa3\x73\x6c\x83\xe0\x2b\xe6\xc1\xa1\x5a\x83\x40\xe7\x6d\xcb\xbd\x03\xb6\xf6\x68\xc1\x68\x84\x90\xc7\x2c\x6e\x1e\x69\xc7\x6c\x04\xfe\x9d\x13\x3e\x1a\x84\xe7\x70\x90\x6b\xa0\xd7\x4c\x5f\x5b\x64\x1e\x1f\x1e\x9e\xad\x66\x6b\x63\x6b\x90\x22\x44\x8e\x5b\xf4\x61\x4a\x80\xf1\x70\xea\x93\x84\xf0\xce\x9f\x40\x8d\xbe\x32\x22\x27\x1f\xde\xdf\x7e\x24\x80\x9a\xfb\x7d\x83\x39\xa9\x5b\xe5\x65\xc3\xac\x8f\x03\x46\x24\x98\x67\xa7\x54\x4e\x39\x4b\xdd\xb4\x3e\x5a\x4b\x54\x62\x14\xcd\x67\xd6\x2f\xa2\xe8\x53\xa3\x0c\x13\x70\xdb\xf1\x83\x1b\xa9\xf0\x0a\xb2\xce\x35\xf0\x7e\xb5\x0e\x0d\xd0\x4d\x5f\x41\xcf\x24\x68\xc8\xb1\x0d\x7a\xd9\xc9\xaf\x98\xa7\xf3\x22\x8b\x4b\x5b\x84\x6e\x39\xbf\x59\xc8\x3a\xb3\xc8\xba\x78\x0c\x93\x64\x80\xaa\xdd\x86\x40\xa3\x18\xc7\xca\x28\x81\x36\x27\x1f\x98\xf3\x08\x7b\xd3\xda\xc7\x64\x56\x68\x31\xd4\xfe\x97\x56\x5a\x14\x39\x19\x24\x52\x64\xf1\x80\xf8\xed\x51\xb3\x58\xc8\xed\x19\xf5\x28\x56\x65\xeb\xbd\xd1\xff\xec\x2c\x6b\x9a\x51\x19\x9f\x38\xf4\x56\x83\x0f\x6a\x6e\xf7\x8d\x27\xc7\xb8\xb8\xb6\xac\xa5\x1f\x8e\xd3\xe7\x98\x14\xb7\x9d\xf6\x2c\x5c\x07\xe9\xb6\x1b\xb8\xaf\x95\x76\xfd\x35\x70\x15\xc7\xbb\xdd\x8e\xee\x66\xd4\xd8\x4d\x9c\x4e\xa7\xd3\xd8\x6d\x37\x04\xfa\xcb\x85\x24\x29\x81\x0a\xe5\xa6\xf2\xbd\x1c\xca\xf7\x8d\xb9\xcf\xc9\x14\xa6\x90\x2e\x56\x74\x35\x4b\x87\x37\x29\xb2\x86\xf9\x0a\xd6\x52\xa9\x9c\xbc\xbc\xb9\xb9\x21\x20\x72\xf2\x2e\x5d\xcc\x69\xb2\x84\x24\x9d\xd3\xf9\x72\xa9\xa2\xd5\x34\x5a\x4d\x79\x74\x41\x57\xab\x7e\x48\x52\xba\xbc\x5c\x1c\xe5\x25\x5d\x2c\x97\x30\xed\x66\x29\x74\xe3\x51\xee\xcd\x60\x0a\x9d\xcd\x4a\xcd\x57\x74\xb1\x80\x6e\xfc\x23\x49\xe9\x9c\x47\x0b\x7a\x39\x9d\xc1\x34\x00\xce\x61\x4e\xe7\x97\xab\x5e\xec\x86\x29\xf4\xcb\x41\xbf\x84\x27\x7d\x18\xaa\x34\x99\xd1\xc5\xfc\x42\x45\x23\xd0\xb4\xe7\x38\xe2\x70\x4a\x01\x52\x7a\x71\xd1\x0f\x73\xba\xb8\x80\x59\xf0\x5d\xd1\x55\x2f\xb9\x05\x9d\x05\x06\x34\x4d\x3b\x65\x14\x94\x6a\x79\x49\x2f\x2f\x97\x21\x02\x01\x71\x36\x3a\xe7\x2c\x1a\xe0\xfb\x28\xac\xbe\x92\xb8\xc8\x42\x3a\xbe\x53\x1d\x71\x5f\x1e\x3f\x54\x7f\x59\xd7\xc6\x27\xba\x51\x3d\x0a\xb9\x95\x22\x14\xe2\x19\xdf\xc3\x01\x95\xfb\xe6\xa6\x19\x39\xbb\x96\x73\x74\x2e\x3a\x16\x28\x9e\x6b\xff\xb1\xbd\x69\xfd\x7f\xde\x14\xcf\x9a\xb7\xb5\x8a\x0c\xce\xc3\x42\x68\x4b\x26\x8c\x56\xfb\xdc\xdb\x16\x8b\xc3\x81\xbe\x73\x9b\x87\x87\x9f\xd2\x98\x3f\xd6\x90\xa5\x0f\xa2\x6c\x4a\xc3\xac\x20\x10\xee\xc8\xe8\x71\x1e\x79\x66\x37\xe8\x73\xf2\x32\xb0\x3f\x8f\x17\x9e\x6b\xd3\xec\xc1\x1b\xb8\x1e\x1c\x7f\x46\xb2\xcf\xe5\x50\x8b\x51\x0a\x47\x26\x47\x71\x92\xc5\xe1\xcb\x1b\x3e\xc8\xc7\x0f\xb1\xe3\x56\x36\xfe\x78\xdb\x84\xa0\xc6\x77\x6c\xcb\x7a\x2d\x01\x67\xf9\xd3\x9f\x04\x37\x02\xe9\xdd\x97\x16\xed\xbe\xfb\x89\xe8\xc5\x28\xa5\x09\x4d\x68\x2d\x35\xbd\x73\xa1\xb4\x7a\xdf\x27\xe8\xe7\x18\x42\xdf\x39\xca\x95\x69\xc5\x5a\x31\x8b\x1d\x10\xbb\x63\xf7\xb1\x92\xa5\x8b\x1f\x03\x4b\xef\x5c\x9c\xd0\x25\x4d\x46\xaa\xef\x6f\x71\x9e\x7d\x7f\x72\x8d\xbb\xa7\xb0\xff\x8f\xd0\xd2\x6b\xf2\xff\xd7\x93\x27\x90\xc9\xbf\x01\x00\x00\xff\xff\x63\x04\x7e\x63\xe2\x09\x00\x00")

func templateIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templateIndexHtml,
		"template/index.html",
	)
}

func templateIndexHtml() (*asset, error) {
	bytes, err := templateIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/index.html", size: 2530, mode: os.FileMode(420), modTime: time.Unix(1535217356, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/application.css": templateApplicationCss,
	"template/index.html": templateIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"application.css": &bintree{templateApplicationCss, map[string]*bintree{}},
		"index.html": &bintree{templateIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

